#include <Arduino.h>
/*
Logic Analyzer
Anotations
Timing Marker Pair
|A1 - A2| = ###

8MS/s for 1 s
TCK rising edge

Analyzers:
JTAG
TAP initial: Run-Test/Idle
LSB first
show TDI TDO count

Async Serial -> tx
*/
/*
Project Specs
Authors: André Sousa (up201504227) e Bruno Maurício (up201604107)
To send to: hsm@fe.up.pt
subject: SELE_T4_B01
content: JTAG: https://git.fe.up.pt/up201604107/final_jtag_t4_b01   SYNC: ........TO ADD........
Functionalities:
If the D command is issued through the Serial input, the IDCODE from the device should be send to the Serial output
If the B command is issued through the Serial input, whether the button is pressed or not, should be send to the Serial output
If the 1 command is issued through the Serial input, the LED should be turned ON
If the 0 command is issued through the Serial input, the LED should be turned OFF



RELATORIO (junçao de todos os trabalhos)
Comms async + JTAG e SENSOR
*/
//TCK on period in microseconds/2   (to read or perform other operations in between 2 sample delays)
//0 can be done because the Arduino is waaaay slower than the chipkits internal clock
#define SampleDelay 500
#define maxBSRelements 64//BSRelementsNmb 32
//uC pins
#define TMS 8  //output
#define TCK 9  //output
#define TDI 10 //input (pic32 TD0)
#define TDO 11 //output (pic32 TDI)
#define LED 13 //built-in led

//Bitwise Utilities
#define Clear_Bit(Address, Bit) Address &= ~(1<<Bit)
#define Set_Bit(Address, Bit) Address |= 1<<Bit
#define Check_Bit(Address, Bit) ((Address & (1<<Bit))>>Bit)

//TAP states
#define TestLogicReset 0
#define RunTestIdle 1

#define SelectDrScan 2
#define CaptureDR 3
#define ShiftDR 4
#define Exit1DR 5
#define PauseDR 6
#define Exit2DR 7
#define UpdateDR 8

#define SelectIRScan 9
#define CaptureIR 10
#define ShiftIR 11
#define Exit1IR 12
#define PauseIR 13
#define Exit2IR 14
#define UpdateIR 15

#define GetState 16

//JTag specific defines
//IR codes
#define BYPASS 0x1F         //Used for bypassing a device in a test chain; this allows the testing of off-chip circuitry and board level interconnections.
#define HIGHZ 0x00          //Places device in a high-impedance state, all pins are forced to inputs
#define SAMPLE_PRELOAD 0x02 //Samples all pins or loads a specific value into output latch. Captures the I/O states of the component, providing a snapshot of its operation.
#define EXTEST 0x06         //Boundary scan. Allows the external circuitry and interconnections to be tested, by either forcing various test patterns on the output pins, or capturing test results from the input pins.
#define IDCODE 0x01         //Shifts out the device’s ID code

//Set the first 4 bits of ISR
#define setIR(ir_in) IR = ir_in&0x0f
#define GoToLogicReset() while(TAP(GetState) != TestLogicReset){ TAP(1); }

uint8_t IR;             //Instruction Register. ONLY 4 bits, LSb first
uint16_t DEVID;         //The devices' 32-bit part identifier
uint16_t BSRAmmount;    //Ammount of BSR elements
uint16_t TDOBuffer;     //64 bit Buffer that holds the current TDO output
uint16_t TDIBuffer;     //64 bit Buffer that holds the received TDI input

uint16_t iter;               //Multipurpose iterator
uint16_t iter2;               //Multipurpose iterator
//------------------------------ GENERAL Purpose ------------------------------
void print(const char* message, int ammount){
  if(ammount == -1){
    Serial.println(message);
  }else{
    Serial.print(message);
    Serial.println(ammount);
  }
}
void print_bin(const char* message,uint16_t in){
  Serial.println(message);
  for(iter2 = 0; iter2 < 16; iter2++){
    Serial.write((char)(in>>iter2&0x01)+48);
  }
  Serial.println();
}
void clock() {
  digitalWrite(TCK, HIGH);
  delayMicroseconds(2);
  digitalWrite(TCK, LOW);
}
void advanceCLK(int tdo, int tms){
  digitalWrite(TDO, tdo);
  TAP(tms);
}
/*
Simulates and controls the device TAP controller
bit by bit
*/
uint8_t TAP(uint8_t next_bit){
  static uint8_t state = TestLogicReset;
  uint8_t activate = 1;
  if(next_bit == GetState){
    return state;
  }
  switch(state){
    case TestLogicReset:
      if(next_bit){
        state = TestLogicReset;
        Serial.println("WARNING, test logic reset");
      }else{
        state = RunTestIdle;
      }
      break;
    case RunTestIdle:
      if(next_bit){
        state = SelectDrScan;
      }else{
        state = RunTestIdle;
      }
      break;
    case SelectDrScan:
      if(next_bit){
        state = SelectIRScan;
      }else{
        state = CaptureDR;
      }
      break;
    case CaptureDR:
      if(next_bit){
        state = Exit1DR;
      }else{
        state = ShiftDR;
      }
      break;
    case ShiftDR:
      if(next_bit){
        state = Exit1DR;
      }else{
        state = ShiftDR;
      }
      break;
    case Exit1DR:
      if(next_bit){
        state = UpdateDR;
      }else{
        state = PauseDR;
      }
      break;
    case PauseDR:
      if(next_bit){
        state = Exit2DR;
      }else{
        state = PauseDR;
      }
      break;
    case Exit2DR:
      if(next_bit){
        state = UpdateDR;
      }else{
        state = ShiftDR;
      }
      break;
    case UpdateDR:
      if(next_bit){
        state = SelectDrScan;
      }else{
        state = RunTestIdle;
      }
      break;
    case SelectIRScan:
      if(next_bit){
        state = TestLogicReset;
        Serial.println("WARNING, test logic reset");
      }else{
        state = CaptureIR;
      }
      break;
    case CaptureIR:
      if(next_bit){
        state = Exit1DR;
      }else{
        state = ShiftIR;
      }
      break;
    case ShiftIR:
      if(next_bit){
        state = Exit1IR;
      }else{
        state = ShiftIR;
      }
      break;
    case Exit1IR:
      if(next_bit){
        state = UpdateIR;
      }else{
        state = PauseIR;
      }
      break;
    case PauseIR:
      if(next_bit){
        state = Exit2IR;
      }else{
        state = PauseIR;
      }
      break;
    case Exit2IR:
      if(next_bit){
        state = UpdateIR;
      }else{
        state = ShiftIR;
      }
      break;
    case UpdateIR:
      if(next_bit){
        state = SelectDrScan;
      }else{
        state = RunTestIdle;
      }
      break;
    case GetState:
      activate = 0;
      break;
    default:
      print("TAP is in a weird state",state);
      break;
  }
  print("TAP moving to ",state);
  if(activate){
    digitalWrite(TMS,next_bit);
    print("Sending to TAP: ",next_bit);
    clock();
  }
  return state;
}
/*
Sets TAP to a specified destination state
*/
void setTAP(uint8_t destination_state){
  uint16_t path;
  uint8_t path_length;
  if(TAP(GetState) != destination_state){           //Check if TAP is already at the destination
    GoToLogicReset();
    switch(destination_state){
      case ShiftIR:
        path = 0b00110;
        path_length = 5;
        break;
      case ShiftDR:
        path = 0b0010;
        path_length = 4;
        break;
      default:
        print("Wrong destination",0);
        break;
    }
    for(iter = 0; iter < path_length; iter++){
      TAP(path&0x01);
      path = path >> 1;
    }
  }
}
/*
Write ammount bits from TDO, and reads ammount of bits into TDI
Clears TDO in the process
An iterable by TMS 0 state (RunTestIdle, ShiftDR, ShiftIR, PauseDr or PauseIR) is assumed
And exitable by TMS 1 state (last shift is made with TMS 1)
LSb first
*/
void communicate(uint16_t ammount, uint8_t exit){
  if(ammount > 16){
    print("Cant communicate over 16 bits at a time",-1);
    return;
  }
  print("Transfering bits: ",ammount);
  TDIBuffer = 0;
  digitalWrite(TCK, LOW);
  digitalWrite(TMS, LOW);
  for(iter = 0; iter < ammount; iter++){
    if(iter == ammount-1 && exit){
      digitalWrite(TMS, HIGH);
    }
    digitalWrite(TDO, TDOBuffer&0x01);
    digitalWrite(TCK, HIGH);
    //delayMicroseconds(SampleDelay);
    //print("Sending to TDO ",TDOBuffer&0x01);
    if(digitalRead(TDI)){
      Set_Bit(TDIBuffer,iter);
    }else{
      Clear_Bit(TDIBuffer,iter);
    }
    //print("Read into TDI ",Check_Bit(TDIBuffer,iter));
    //delayMicroseconds(SampleDelay);
    digitalWrite(TCK, LOW);
    TDOBuffer = TDOBuffer>>1;
  }
  print("iter: ",iter);
  //print_bin("",TDIBuffer);
  digitalWrite(TMS, LOW);

}
/*
Writes a certain ammount of data into TDOBuffer, LSb first
*/
void setTDO(uint16_t data, uint8_t ammount){
  if(ammount >  16){
    print("Can only store 16 bits",-1);
  }
  for(iter = 0; iter < ammount; iter++){
    if(Check_Bit(data,iter)){
      Set_Bit(TDOBuffer,iter);
    }else{
      Clear_Bit(TDOBuffer,iter);
    }
  }
}
/*
Reads a certain ammount of TDIBuffer into data
*/
void getTDI(uint16_t* data, uint8_t ammount){
  for(iter = 0; iter < ammount; iter++){
    if(Check_Bit(TDIBuffer,iter)){
      Set_Bit(*data,iter);
    }else{
      Clear_Bit(*data,iter);
    }
  }
}
//------------------------------ JTAG functions ------------------------------
/*
Load Instruction Register with the scpecified Instruction Register Code
*/
void loadIR(uint8_t IRC){
  if(IR != IRC){            //Check if the IRC is already loaded in the IR
    print("Setting TAP to ShiftIR and IR to ",IRC);
    setTAP(ShiftIR);        //Set TAP to ShiftIR
    setIR(IRC);             //Prepare and output IRC
    setTDO(IR,4);
    communicate(4,1);
  }else{
    print("Current IR is already the wanted one",-1);
  }
}
/*
Load Data Register with the scpecified ammount of data
*/
void loadDR(uint16_t data, uint8_t ammount){
  setTAP(ShiftDR);        //Set TAP to ShiftIR
  setTDO(data,ammount);   //Output data
  print_bin("TDO after bypass:",TDOBuffer);
  communicate(ammount,1);
}
//------------------------------ Functions ------------------------------
/*
Test Boundary Scan Register integrity
*/
uint8_t testJTAG(){
  uint16_t data;
  GoToLogicReset();
  //Test bypass bit
  loadIR(BYPASS);
  setTDO(1,1);          //Clear TDOBuffer
  communicate(3,1);       //If everything is ok, should receive 01
  getTDI(&data,1);
  if(data != 1){
    print("data is not 1, failed test",-1);
  }
  //Test BSR
  loadIR(EXTEST);
  setTDO(0,16);          //Clear TDOBuffer
  for(iter = 0; iter < 1+(maxBSRelements/16); iter++){
    communicate(16,0);       //If everything is ok, should receive 01
  }
  
  getTDI(&data,1);
  if(data != 1){
    print("data is not 1, failed test",-1);
  }

  return 1;
}

void setup() {
  Serial.begin(9600);
  print("Starting\n\n",-1);
  DEVID = 0;
  BSRAmmount = 0;    
  TDOBuffer = 0;
  TDIBuffer = 0;
  pinMode(TDI,INPUT);     //input (pic32 TD0)
  pinMode(TMS,OUTPUT);
  pinMode(TCK,OUTPUT);
  pinMode(TDO,OUTPUT);    //input (pic32 TDI)
  digitalWrite(TMS,LOW);
  digitalWrite(TCK, HIGH);
  digitalWrite(TDO,LOW);
  advanceCLK(0,0);
}

void setShiftIR(){

  Serial.println("Set to shift IR");
}
void setShiftDR(){
  if(TAP(GetState) == ShiftDR) {
    return;
  }else if(TAP(GetState) != ShiftIR){
    Serial.println("Something is wrong, not on shift");
    return;
  }
  advanceCLK(0,)
  digitalWrite(TMS, LOW);//0
  clock();
  digitalWrite(TMS, HIGH);//1
  clock();
  digitalWrite(TMS, LOW);//0
  clock();
  digitalWrite(TMS, LOW);//0
  clock();
  Serial.println("Set to shift DR");
}
void loop() {
  if(Serial.available()){
    switch(Serial.read()){
      case 'a':
        setShiftIR();
      break;
      case 'b':
        //00000 00000 11111 11111 00000
        //10000 11111 00000 11111 11111
        digitalWrite(TDO, HIGH);
        for(int i = 0; i < 5; i++){
          clock();
        }
        digitalWrite(TDO, LOW);
        for(int i = 0; i < 5; i++){
          clock();
        }
        digitalWrite(TDO, HIGH);
        for(int i = 0; i < 5; i++){
          Serial.print(digitalRead(TDI));
          clock();
        }
        digitalWrite(TDO, LOW);
        for(int i = 0; i < 5; i++){
          Serial.print(digitalRead(TDI));
          clock();
        }
        Serial.println();
        break;
      break;
      case 'c':
        //Set TAP to shiftDR
        setShiftDR();
      break;
      case 'd':
        digitalWrite(TDO, HIGH);
        for(int i = 0; i < 32; i++){
          clock();
        }
        digitalWrite(TDO, LOW);
        for(int i = 0; i < 32; i++){
          clock();
        }
        digitalWrite(TDO, HIGH);
        for(int i = 0; i < 32; i++){
          Serial.print(digitalRead(TDI));
          clock();
        }
        for(int i = 0; i < 32; i++){
          Serial.print(digitalRead(TDI));
          clock();
        }
        Serial.println();
      break;
      case 'e':
        advanceCLK(0,1);
        advanceCLK(0,1);
        advanceCLK(0,0);
        advanceCLK(0,0);

        break;
        //setShiftIR
        //insert 5 0s
        //Go to idle
        advanceCLK(0,1);
        advanceCLK(0,1);
        advanceCLK(0,0);
        //Go to shift IR
        advanceCLK(0,1);
        advanceCLK(0,1);
        advanceCLK(0,0);
        advanceCLK(0,0);
        //Retrieve the 5 1s
        for(int i = 0; i < 5; i++){
          advanceCLK(0,0);
          Serial.print(digitalRead(TDI));
        }
        break;
        /*
        digitalWrite(TDO, HIGH);
        clock();
        clock();
        clock();
        clock();

        //*/
        
        setShiftIR();
        digitalWrite(TDO, LOW);
        
        //default: 
        for(int i = 0; i < 10; i++){
          clock();
          Serial.print(digitalRead(TDI));
        }
        Serial.println();
        setShiftDR();
        for(int i = 0; i < 32; i++){
          clock();
          Serial.print(digitalRead(TDI));
        }
      break;
    }
  }
}